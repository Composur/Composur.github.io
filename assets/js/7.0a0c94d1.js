(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{306:function(t,s,a){t.exports=a.p+"assets/img/set-cookie.f3ed5f5c.jpg"},307:function(t,s,a){t.exports=a.p+"assets/img/cookie_store.24aead89.jpg"},308:function(t,s,a){t.exports=a.p+"assets/img/send-cookie.356790b3.jpg"},352:function(t,s,a){t.exports=a.p+"assets/img/http3.d0b32f45.jpg"},353:function(t,s,a){t.exports=a.p+"assets/img/uri02.122cb877.jpg"},354:function(t,s,a){t.exports=a.p+"assets/img/http_res.234ac7f3.jpg"},413:function(t,s,a){"use strict";a.r(s);var v=a(33),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"http-、https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-、https"}},[t._v("#")]),t._v(" HTTP 、HTTPS")]),t._v(" "),v("h3",{attrs:{id:"http-协议是什么？有哪些特点？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-协议是什么？有哪些特点？"}},[t._v("#")]),t._v(" HTTP 协议是什么？有哪些特点？")]),t._v(" "),v("ul",[v("li",[t._v("header + body 结。 "),v("strong",[t._v("起始行 + 头部 + 空行 + 实体")])])]),t._v(" "),v("div",{staticClass:"language-http extra-class"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[t._v("# 起始行 方法 + 路径 + 版本号\n"),v("span",{pre:!0,attrs:{class:"token request-line"}},[v("span",{pre:!0,attrs:{class:"token property"}},[t._v("GET")]),t._v(" /home HTTP/1.1")]),t._v("\n")])])]),v("h2",{attrs:{id:"get-和-post-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),v("p",[v("code",[t._v("GET")]),t._v(" 和 "),v("code",[t._v("POST")]),t._v(" 是 "),v("code",[t._v("HTTP")]),t._v(" 协议中的两种发送请求的方法。")]),t._v(" "),v("p",[v("code",[t._v("HTTP")]),t._v(" 是基于 "),v("code",[t._v("TCP/IP")]),t._v(" 的关于数据如何在万维网中如何通信的协议 。"),v("code",[t._v("HTTP")]),t._v(" 的底层是 "),v("code",[t._v("TCP/IP")]),t._v("。所以"),v("code",[t._v("GET")]),t._v(" 和 "),v("code",[t._v("POST")]),t._v(" 的底层也是 "),v("code",[t._v("TCP/IP")]),t._v("。"),v("code",[t._v("GET")]),t._v(" 和 "),v("code",[t._v("POST")]),t._v(" 能做的事情是一样一样的。你要给 "),v("code",[t._v("GET")]),t._v(" 加上"),v("code",[t._v("request body")]),t._v("，给 "),v("code",[t._v("POST")]),t._v(" 带上 "),v("code",[t._v("url")]),t._v(" 参数，技术上是完全行的通的。")]),t._v(" "),v("p",[t._v("一般的区别都是浏览器层面的限制，根据不同的浏览器对应的限制也不同。")]),t._v(" "),v("p",[t._v("简单来说：")]),t._v(" "),v("p",[v("strong",[t._v("GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包")])]),t._v(" "),v("p",[t._v("正常来说：")]),t._v(" "),v("p",[t._v("对于 "),v("code",[t._v("GET")]),t._v(" 方式的请求，浏览器会把 "),v("code",[t._v("http header")]),t._v(" 和 "),v("code",[t._v("data")]),t._v(" 一并发送出去，服务器响应 "),v("code",[t._v("200")]),t._v("（返回数据）。")]),t._v(" "),v("p",[t._v("而对于 "),v("code",[t._v("POST")]),t._v("，浏览器先发送 "),v("code",[t._v("header")]),t._v("，服务器响应"),v("code",[t._v("100 continue")]),t._v("，浏览器再发送 "),v("code",[t._v("data")]),t._v("，服务器响应 "),v("code",[t._v("200 ok")]),t._v("（返回数据）。"),v("small",[t._v("并不是所有浏览器都会在POST中发送两次包，"),v("code",[t._v("Firefox")]),t._v(" 就只发送一次")])]),t._v(" "),v("h2",{attrs:{id:"https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),v("blockquote",[v("p",[t._v("出现是为了解决 HTTP 明文传输带来的安全性问题，因在 HTTP 传输的过程中任何人都可以截获，修改等。HTTPS 提供了三个保障：加密（客户端和服务端交互），数据一致性（传输的数据一致），身份认证（防止中间人攻击）。")])]),t._v(" "),v("p",[v("strong",[t._v("HTTP 请求数据传输存在的问题：")])]),t._v(" "),v("ul",[v("li",[t._v("明文传输等于裸奔")]),t._v(" "),v("li",[t._v("对称加密：加解密是一套 "),v("code",[t._v("key")]),t._v(" 也等于裸奔")]),t._v(" "),v("li",[t._v("非对称加密：客户端可以拿公钥对数据加密传输到服务端，但是反过来不行，服务端到客户端数据不安全。")])]),t._v(" "),v("p",[v("strong",[t._v("解决办法：HTTPS")])]),t._v(" "),v("p",[v("strong",[t._v("HTTP + TSL(SSL) = HTTPS")]),t._v(" 相当于在 "),v("code",[t._v("HTTP")]),t._v(" 外面套了一层 "),v("code",[t._v("SSL")]),t._v(" ，"),v("code",[t._v("HTTP")]),t._v(" 先和 "),v("code",[t._v("TSL")]),t._v(" 通信，"),v("code",[t._v("TLS")]),t._v(" 在根本上使用"),v("code",[t._v("对称加密")]),t._v("和 "),v("code",[t._v("非对称加密")]),t._v(" 两种形式。"),v("code",[t._v("TLS")]),t._v(" 是一个双向验证的过程，握手正式结束后，"),v("code",[t._v("HTTP")]),t._v(" 才开始正式的加密报文传输。")]),t._v(" "),v("p",[t._v("传输层安全性("),v("code",[t._v("TLS")]),t._v(")，安全套接字层("),v("code",[t._v("SSL")]),t._v(")。"),v("code",[t._v("TLS")]),t._v(" 是 "),v("code",[t._v("SSL")]),t._v(" 的后续版本。它们是用于计算机之间的身份验证和传输加密数据的一种协议。")]),t._v(" "),v("p",[v("strong",[t._v("非对称加密的特点：")])]),t._v(" "),v("ul",[v("li",[t._v("公钥加密私钥解密，例如：任何经过 A 服务公钥加密的信息，只有 A 服务的私钥才能解密。")])]),t._v(" "),v("p",[t._v("服务端拿到客户端的随机字符串后生成对层加密的 "),v("code",[t._v("key")])]),t._v(" "),v("ul",[v("li",[t._v("任何有公钥的人可以确认对方发送的信息是否被加密过的。\n"),v("ul",[v("li",[t._v("一般访问 "),v("code",[t._v("https")]),t._v(" 网站，服务器会向客户端发送由 "),v("code",[t._v("CA")]),t._v(" 签名认证的公钥信息。")]),t._v(" "),v("li",[t._v("客户端拿到公钥对请求到服务端的字段（随机字符）进行公钥加密")]),t._v(" "),v("li",[t._v("服务端用私钥解密客户端发来的随机字符，作为对称加密的 "),v("code",[t._v("key")])])])])]),t._v(" "),v("p",[v("code",[t._v("HTTPS")]),t._v(" 存在的问题：中间人劫持，它代理了服务端。")]),t._v(" "),v("ul",[v("li",[t._v("在客户端和服务端中间用自己的公钥私钥进行劫持数据，转发客户端和服务端请求")]),t._v(" "),v("li",[t._v("记录客户端和服务端的通信数据，进行篡改。")])]),t._v(" "),v("p",[v("strong",[t._v("解决方案：CA")])]),t._v(" "),v("p",[t._v("因为客户端不知道拿到的公钥到底是服务端的还是中间人的。服务端用 "),v("code",[t._v("CA")]),t._v(" 认证生成 "),v("code",[t._v("license")]),t._v(" ,发给客户端，浏览器存了在大量的 "),v("code",[t._v("CA")]),t._v(" 机构的公钥，对拿到的公钥进行验证。")]),t._v(" "),v("p",[v("strong",[t._v("细节：客户端服务端协商的过程是怎么样的？")])]),t._v(" "),v("ul",[v("li",[t._v("客户端请求服务端会携带 "),v("code",[t._v("SSL")]),t._v(" 版本、非对称加密算法、随机数1")]),t._v(" "),v("li",[t._v("服务端采用客户端的 "),v("code",[t._v("SSL")]),t._v(" 版本、发送对称算法、随机数2、证书")]),t._v(" "),v("li",[t._v("客户端认证证书")]),t._v(" "),v("li",[t._v("客户端发送随机数3、hash(含第一步、第二步的数据)，上传到服务端。")]),t._v(" "),v("li",[t._v("服务端检查客户端发来的 hash 是否和前两步发来的 hash 一致 ，根据协商一致的算法三个随机数生成 key")]),t._v(" "),v("li",[t._v("服务端采用散列算法生成 hash(随机数1，随机数2，随机数3)")]),t._v(" "),v("li",[t._v("客户端也生成  hash(随机数1，随机数2，随机数3) 生成一个 key 服务端的 key 和 客户端的 key 均不在网络上传输，做本地校验使用。")])]),t._v(" "),v("p",[v("strong",[t._v("刷新页面不需要重新建立 SSL 连接？")])]),t._v(" "),v("p",[v("code",[t._v("TCP")]),t._v(" 连接有的时候会被浏览器和服务端维持一段时间。"),v("code",[t._v("TCP")]),t._v(" 不需要重新建立，"),v("code",[t._v("SSL")]),t._v(" 自然也会用之前的。")]),t._v(" "),v("p",[v("strong",[t._v("`总结：")])]),t._v(" "),v("p",[v("code",[t._v("HTTPS")]),t._v(" 采用了非对称加密 + 对称加密 + "),v("code",[t._v("CA")]),t._v(" + "),v("code",[t._v("hash")]),t._v(" 算法")]),t._v(" "),v("h2",{attrs:{id:"http-各个版本的区别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-各个版本的区别是什么"}},[t._v("#")]),t._v(" HTTP 各个版本的区别是什么")]),t._v(" "),v("p",[v("em",[t._v("解决了哪些问题？比如头部缩减的优化，那你了解这个优化的具体策略吗？缩减了什么？又增加了什么？要深挖细节。多路复用，是怎么多路复用的？")])]),t._v(" "),v("p",[v("img",{attrs:{src:a(352),alt:"http3"}})]),t._v(" "),v("p",[t._v("** HTTP 1.0 短连接 **，带来的问题。")]),t._v(" "),v("p",[t._v("如果有 100 张图片，要发送 100 次请求，需要 100 次的 TCP 握手和挥手，消耗性能。")]),t._v(" "),v("p",[v("strong",[t._v("http 1.1 长连接")]),t._v("，只需要一次 TCP 握手和挥手。")]),t._v(" "),v("p",[t._v("HTTP/1.1 有两个主要的缺点："),v("strong",[t._v("安全不足和性能不高")]),t._v("。")]),t._v(" "),v("div",{staticClass:"language-http extra-class"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("connection:")]),t._v("keep-alive;\n")])])]),v("p",[v("strong",[v("code",[t._v("TCP")]),t._v(" 连接后是否会在一个 "),v("code",[t._v("HTTP")]),t._v(" 请求完成后断开？什么情况下会断开？一个 "),v("code",[t._v("TCP")]),t._v(" 连接可以对应几个 "),v("code",[t._v("HTTP")]),t._v(" 请求？")])]),t._v(" "),v("p",[v("code",[t._v("HTTP 1.0")]),t._v(" 会断开，"),v("code",[t._v("HTTP 1.1")]),t._v(" 请求一个数据后可以不关闭连接继续请求其它数据。除非请求中写明 "),v("code",[t._v("Connection: close")]),t._v(" 。在同一个连接中完成多个请求，上一个请求成功或者是失败后才会进行下一个请求。")]),t._v(" "),v("p",[v("strong",[t._v("一个 "),v("code",[t._v("TCP")]),t._v(" 连接中 "),v("code",[t._v("HTTP")]),t._v(" 请求发送可以一起发送么（同步请求）？")])]),t._v(" "),v("p",[t._v("单个 "),v("code",[t._v("TCP")]),t._v(" 连接在同一时刻只能处理一个请求，意思是说：两个请求的生命周期不能重叠，任意两个 "),v("code",[t._v("HTTP")]),t._v(" 请求从开始到结束的时间在同一个 "),v("code",[t._v("TCP")]),t._v(" 连接里不能重叠。")]),t._v(" "),v("p",[v("small",[t._v("在 HTTP/1.1 存在 Pipelining 技术可以完成这个多个请求同时发送，但是由于浏览器默认关闭，需要服务器按顺序返回请求")])]),t._v(" "),v("p",[t._v("为了提高页面加载效率，浏览器也可以同时向服务器建立多个 "),v("code",[t._v("TCP")]),t._v(" 连接，不过是有限制的 "),v("code",[t._v("Chrome")]),t._v("对同一域名的请求一般是 "),v("code",[t._v("6")]),t._v(" 个。如果有 "),v("code",[t._v("12")]),t._v(" 个请求是需要等前 "),v("code",[t._v("6")]),t._v(" 个完成后后面 "),v("code",[t._v("6")]),t._v(" 个才可以建立连接请求。")]),t._v(" "),v("p",[v("strong",[t._v("http 2.0 长连接 + io 多路复用模型")])]),t._v(" "),v("p",[v("strong",[t._v("HTTP/2是基于二进制“帧”的协议，HTTP/1.1是基于“文本分割” （key:value）解析的协议。")])]),t._v(" "),v("blockquote",[v("p",[t._v("HTTP/2基于SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection），使用HTTP/2能带来20%~60%的效率提升。")])]),t._v(" "),v("p",[t._v("解决的问题：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("明文，改成二进制传输。")])]),t._v(" "),v("li",[v("p",[t._v("传输，改成单连接 + 帧")])]),t._v(" "),v("li",[v("p",[t._v("header 太长 ，HTTP 2.0 以二进制方式传输和 Header 压缩。")]),t._v(" "),v("p",[t._v("建立索引表让请求头字段得到极大程度的精简和复用。")]),t._v(" "),v("p",[t._v("我们用 "),v("code",[t._v("BT")]),t._v("下载，下载电视剧合集的时候不是一集一集的下载而是把资源打散成一个个块，每个块在客户端和服务端之间都是平等的，大家交错传输，传输完后客户端再进行重组。")]),t._v(" "),v("p",[t._v("在 "),v("code",[t._v("HTTP2.0")]),t._v(" 中原来的"),v("code",[t._v("Header+Body")]),t._v("的消息"),v("strong",[t._v("打散")]),t._v('为数个小片的二进制"帧，用'),v("strong",[t._v("Headers帧")]),t._v("存放头部字段，"),v("strong",[t._v("Data帧")]),t._v("存放请求体数据，请求和响应多路复用，交错传输，请求完成后在另一端组装。")]),t._v(" "),v("p",[t._v("所以 "),v("code",[t._v("HTTP2.0")]),t._v(" 很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，一次请求完成（html css js 下载到浏览器）。")])]),t._v(" "),v("li",[v("p",[t._v("server 主动 push ，服务器推送")])])]),t._v(" "),v("p",[v("strong",[t._v("HTTP2.0 多路复用")])]),t._v(" "),v("p",[t._v("多路复用代替原来的序列和阻塞机制，所有就是请求的都是通过一个 "),v("code",[t._v("TCP")]),t._v(" 连接并发完成。同一个域名下的所有通信都在一个连接上完成，只需要占用一个 "),v("code",[t._v("TCP")]),t._v(" 连接。使用一个连接平行发送多个请求和响应。")]),t._v(" "),v("p",[t._v("同时也很好的解决了浏览器限制同一个域名下的请求数量的问题。"),v("code",[t._v("Chrome")]),t._v(" 允许同一个域名下最多 "),v("code",[t._v("6")]),t._v(" 个请求。")]),t._v(" "),v("p",[v("strong",[t._v("HTTP 3.0")])]),t._v(" "),v("p",[t._v("http3 基于 UDP 的 Quic")]),t._v(" "),v("p",[t._v("QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了既快又可靠的协议")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("HTTP 2 新特性")]),t._v(" "),v("ul",[v("li",[t._v("流量控制")]),t._v(" "),v("li",[t._v("重置消息")]),t._v(" "),v("li",[t._v("多路复用")]),t._v(" "),v("li",[t._v("HTTP/2 使用 TCP 协议来传输的，而如果使用 HTTPS 的话，还需要使用 TLS 协议进行安全传输，而使用TLS也需要一个握手过程，"),v("strong",[t._v("这样就需要有两个握手延迟过程")]),t._v("：")])])])]),t._v(" "),v("ol",{attrs:{start:"7"}},[v("li",[t._v("URI和URL的区别？\n"),v("ul",[v("li",[t._v("URI是"),v("code",[t._v("Uniform Resource Identifier")]),t._v("的缩写,统一资源标识符,即由某个协议方案表示的资源的定位标识符")]),t._v(" "),v("li",[t._v("URI 用字符串标识某一互联网资源，而 URL表示资源的地点（互联网上所处的位置）。可见 URL是 URI 的子集"),v("br")]),t._v(" "),v("li",[t._v("URI的例子\n"),v("img",{attrs:{src:"http://cdn.xutong.top/uri.jpg",alt:"uri"}})]),t._v(" "),v("li",[t._v("绝对URI的格式,遵循以下规则。\n"),v("img",{attrs:{src:a(353),alt:"uri"}})])])])]),t._v(" "),v("h2",{attrs:{id:"http-进阶"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-进阶"}},[t._v("#")]),t._v(" HTTP 进阶")]),t._v(" "),v("ul",[v("li",[t._v("说说Http协议的工作流程")]),t._v(" "),v("li",[t._v("Http请求报文与响应报文的格式？")]),t._v(" "),v("li",[t._v("Http首部包含哪些字段？举例说明")]),t._v(" "),v("li",[t._v("Https的原理是什么？")]),t._v(" "),v("li",[t._v("浅析Http和Https的三次握手有什么区别。")]),t._v(" "),v("li",[t._v("谈谈Session/cookie机制，如何实现会话跟踪？")]),t._v(" "),v("li",[t._v("什么是Web缓存？原理如何？")]),t._v(" "),v("li",[t._v("OSI有哪七层模型？TCP/IP是哪四层模型。")]),t._v(" "),v("li",[t._v("讲一讲TCP协议的三次握手和四次挥手流程。")]),t._v(" "),v("li",[t._v("为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？")]),t._v(" "),v("li",[t._v("websockt是什么？和Http有什么区别？")]),t._v(" "),v("li",[t._v("什么是非持久连接，什么是持久连接？")]),t._v(" "),v("li",[t._v("Keep-Alive: timeout=5, max=100是什么意思？")]),t._v(" "),v("li",[t._v("http1.0，http1.1，http2.0区别（HTTP1.1版本新特性？HTTP2版本新特性？）")]),t._v(" "),v("li",[t._v("对Http代理做个介绍？")]),t._v(" "),v("li",[t._v("常见的鉴权方式有哪些？")]),t._v(" "),v("li",[t._v("http 2 http3\n"),v("ul",[v("li",[t._v("以富媒体（如图片、声音、视频）")])])])]),t._v(" "),v("h2",{attrs:{id:"http-auth-验证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-auth-验证"}},[t._v("#")]),t._v(" HTTP Auth 验证")]),t._v(" "),v("p",[t._v("Authorization  401 ，没有带认证或认证信息错误")]),t._v(" "),v("p",[t._v("Forbidden 403，带有认证信息但是服务端认为认证信息对应的用户没有对应资源的访问权限")]),t._v(" "),v("p",[t._v("二者都可以理解为权限不足")]),t._v(" "),v("p",[v("strong",[t._v("Authorization：")])]),t._v(" "),v("p",[t._v("作为 HTTP 的 Header 每次携带用户信息去请求资源。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Basic 方法 Base64 编码用户信息发送到服务端")])]),t._v(" "),v("li",[v("p",[t._v("Bearer 方式 token 的模式")]),t._v(" "),v("div",{staticClass:"language-http extra-class"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[t._v('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9; base64 解码 {"alg":"RS256","typ":"JWT"}\n')])])])])]),t._v(" "),v("h2",{attrs:{id:"http-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[t._v("#")]),t._v(" HTTP 缓存")]),t._v(" "),v("p",[t._v("客户端向服务器请求资源，服务器返回响应的时候，会返回一组描述响应的内容类型、长度、缓存指令、验证令牌的 HTTP 标头。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(354),alt:"http_res"}})]),t._v(" "),v("p",[t._v("上图表示：")]),t._v(" "),v("ul",[v("li",[t._v("返回一个 "),v("code",[t._v("1024")]),t._v(" 字节的响应")]),t._v(" "),v("li",[t._v("客户端最多缓存 "),v("code",[t._v("120s")])]),t._v(" "),v("li",[t._v("提供一个验证令牌 "),v("code",[t._v("x234dff")]),t._v(" 用于在响应过期后检查资源是否被修改\n"),v("ul",[v("li",[t._v("这个令牌一般是文件内容的 "),v("code",[t._v("hash")]),t._v(" 或其它指纹")])])])]),t._v(" "),v("h3",{attrs:{id:"通过-etag-验证缓存的响应"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通过-etag-验证缓存的响应"}},[t._v("#")]),t._v(" 通过 Etag 验证缓存的响应")]),t._v(" "),v("p",[t._v("以上图为例：客户端在 120s 对同一资源又发起了请求，会带上这个 "),v("code",[t._v("Etag")]),t._v(" 发送到服务器，如果指纹未发送改变，服务器会返回 "),v("code",[t._v("304 Not Modified")]),t._v(" 响应，告知浏览器缓存中的响应未发生改变，可以继续延用 120s 。这样就不用再次下载数据，直接用浏览器自身的缓存就可以。")]),t._v(" "),v("h3",{attrs:{id:"cache-control"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),v("blockquote",[v("p",[t._v("Cache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// express 设置响应的缓存")]),t._v("\nres"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-Control'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no-cache'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nres"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-Control'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'no-store'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("h4",{attrs:{id:"no-cache"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#no-cache"}},[t._v("#")]),t._v(" no-cache")]),t._v(" "),v("p",[t._v("表示客户端必须先于服务器确定返回的响应是否发生了变化，通过 etag 验证资源是否发生了改变，然后才能使用该响应。如果为发生改变则不用下载直接使用浏览器的缓存。")]),t._v(" "),v("h4",{attrs:{id:"no-store"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#no-store"}},[t._v("#")]),t._v(" no-store")]),t._v(" "),v("p",[t._v("禁止浏览器缓存服务器的响应。")]),t._v(" "),v("h4",{attrs:{id:"public"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#public"}},[t._v("#")]),t._v(" public")]),t._v(" "),v("p",[v("code",[t._v("public")]),t._v(" 不是必需的，因为明确的缓存信息（例如 "),v("code",[t._v("max-age")]),t._v("）已表示响应是可以缓存的。")]),t._v(" "),v("h4",{attrs:{id:"private"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#private"}},[t._v("#")]),t._v(" private")]),t._v(" "),v("p",[t._v("浏览器可以缓存 "),v("code",[t._v("private")]),t._v(" 响应，但是这是只为单个用户的缓存，不允许中间缓存对其缓存，例如 "),v("code",[t._v("CDN")]),t._v(" 不能缓存。")]),t._v(" "),v("h4",{attrs:{id:"max-age"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#max-age"}},[t._v("#")]),t._v(" max-age")]),t._v(" "),v("p",[t._v("从请求时间开始，允许响应缓存的最长时间（秒）。")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("res"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cache-Control'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'public, max-age=86400'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一天")]),t._v("\n")])])]),v("h4",{attrs:{id:"最佳缓存策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最佳缓存策略"}},[t._v("#")]),t._v(" 最佳缓存策略")]),t._v(" "),v("p",[t._v("理想情况下客户端应该尽可能多的缓存响应，缓存尽可能长的时间。并未每个响应提供令牌，实现高效的验证。")]),t._v(" "),v("h4",{attrs:{id:"废弃和更新缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#废弃和更新缓存"}},[t._v("#")]),t._v(" 废弃和更新缓存")]),t._v(" "),v("p",[t._v("如果你设置了缓存时间，那么在这个缓存时间内资源发生了更新咋办？")]),t._v(" "),v("p",[t._v("变更文件名，webpack chunk name，强制用户下载更新。这个时候请求地址变了肯定需要从新请求。")]),t._v(" "),v("h2",{attrs:{id:"cookie"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" Cookie")]),t._v(" "),v("h3",{attrs:{id:"cookie-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cookie-2"}},[t._v("#")]),t._v(" Cookie")]),t._v(" "),v("blockquote",[v("p",[t._v("Cookie（复数形态Cookies），类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据。")])]),t._v(" "),v("h3",{attrs:{id:"cookie-有什么用？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cookie-有什么用？"}},[t._v("#")]),t._v(" Cookie 有什么用？")]),t._v(" "),v("p",[t._v("为了解决 "),v("code",[t._v("HTTP")]),t._v(" 无状态导致的问题中，客户端与服务端会话状态的问题。这个状态单指后端服务的状态而非通信协议的状态。")]),t._v(" "),v("ol",[v("li",[t._v("会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）")]),t._v(" "),v("li",[t._v("个性化设置（如用户自定义设置、主题等）")]),t._v(" "),v("li",[t._v("浏览器行为跟踪（如跟踪分析用户行为等）")])]),t._v(" "),v("h3",{attrs:{id:"cookie-有哪些部分组成？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cookie-有哪些部分组成？"}},[t._v("#")]),t._v(" Cookie 有哪些部分组成？")]),t._v(" "),v("p",[t._v("作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Name / Value")]),t._v(" "),v("ul",[v("li",[t._v("用 JavaScript 操作 Cookie 的时候注意对 Value 进行编码处理。")])])]),t._v(" "),v("li",[v("p",[t._v("Expirse")]),t._v(" "),v("ul",[v("li",[t._v("用于设置 Cookie 的过期时间。")]),t._v(" "),v("li",[t._v("当 Expires 属性缺省时，表示是会话性 Cookie。关闭浏览器失效。有些浏览器提供了会话恢复功能，这样会保存 Cookie。")]),t._v(" "),v("li",[t._v("过期的时间只与客户端相关，而不是服务端。")])])]),t._v(" "),v("li",[v("p",[t._v("Max-Age")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("用于设置在 Cookie 失效之前需要经过的秒数")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("res"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("cookie")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'userid'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("maxAge"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("Max-Age 可以为正数、负数、甚至是 0。")])]),t._v(" "),v("li",[v("p",[t._v("如果 max-Age 属性为正数时，浏览器会将其持久化，即写到对应的 Cookie 文件中。")])]),t._v(" "),v("li",[v("p",[t._v("当 max-Age 属性为负数，则表示该 Cookie 只是一个会话性 Cookie。")])]),t._v(" "),v("li",[v("p",[t._v("当 max-Age 为 0 时，则会立即删除这个 Cookie。")])]),t._v(" "),v("li",[v("p",[t._v("假如 Expires 和 Max-Age 都存在，Max-Age 优先级更高。")])])])]),t._v(" "),v("li",[v("p",[t._v("Domain")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("指定了 Cookie 可以送达的主机名")])]),t._v(" "),v("li",[v("p",[t._v("没有指定默认是当前主机部分（不含子域名）")]),t._v(" "),v("div",{staticClass:"language-http extra-class"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[t._v(".xxx.com\n")])])])])])]),t._v(" "),v("li",[v("p",[t._v("Path")]),t._v(" "),v("ul",[v("li",[t._v("Domain 和 Path 标识共同定义了 Cookie 的作用域：即 Cookie 应该发送给哪些 URL")])])]),t._v(" "),v("li",[v("p",[t._v("Secure")]),t._v(" "),v("ul",[v("li",[t._v("标记为 Secure 的 Cookie 只应通过被 HTTPS 协议加密过的请求发送给服务端")])])]),t._v(" "),v("li",[v("p",[t._v("HTTPOnly")]),t._v(" "),v("ul",[v("li",[t._v("设置 HTTPOnly 属性可以防止客户端脚本通过 document.cookie 等方式访问 Cookie，有助于避免 XSS 攻击。")])])]),t._v(" "),v("li",[v("h4",{attrs:{id:"samesite"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#samesite"}},[t._v("#")]),t._v(" SameSite")]),t._v(" "),v("p",[v("em",[t._v("Chrome80 版本中默认屏蔽了第三方的 Cookie")])]),t._v(" "),v("ul",[v("li",[t._v("SameSite 属性可以让 Cookie 在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）。\n"),v("ul",[v("li",[v("strong",[t._v("Strict")]),t._v("浏览器将只发送相同站点请求的 Cookie,当前网页 URL 与请求目标 URL 需完全一致。")]),t._v(" "),v("li",[v("strong",[t._v("Lax")]),t._v(" 允许部分第三方请求携带 Cookie")]),t._v(" "),v("li",[v("strong",[t._v("None")]),t._v(" 无论是否跨站都会发送 Cookie")])])]),t._v(" "),v("li",[t._v("之前默认是 None 的，Chrome80 后默认是 Lax。")])])])]),t._v(" "),v("h3",{attrs:{id:"如何查看-cookie"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何查看-cookie"}},[t._v("#")]),t._v(" 如何查看 Cookie ?")]),t._v(" "),v("ul",[v("li",[t._v("可以在浏览器的开发者工具中查看到当前页面的 Cookie")]),t._v(" "),v("li",[t._v("可以在计算机上查看本机的 Cookies 文件 ("),v("small",[t._v("以 Mac 为例")]),t._v(")\n"),v("ul",[v("li",[t._v("路径为:"),v("code",[t._v("/Users/haizhi/Library/ApplicationSupport/Google/Chrome/Default")])]),t._v(" "),v("li",[t._v("它是一个 "),v("code",[t._v("sqlite")]),t._v(" 数据库文件，可以用 "),v("code",[t._v("sqlite")]),t._v(" 客户端打开查看。")])])])]),t._v(" "),v("h3",{attrs:{id:"怎么设置-cookie"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么设置-cookie"}},[t._v("#")]),t._v(" 怎么设置 Cookie")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("客户端发送 HTTP 请求到服务器")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("reqLogin")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/login'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("当服务器收到 HTTP 请求时，在响应头里面添加一个 Set-Cookie 字段 ("),v("small",[v("code",[t._v("express")]),t._v(" 为例")]),t._v(")")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("router"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/login'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if success")]),t._v("\n  res"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("cookie")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'userid'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_id"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("maxAge"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("浏览器收到响应后保存下 "),v("code",[t._v("Cookie")])]),t._v(" "),v("p",[t._v("收到响应：")]),t._v(" "),v("p",[v("img",{attrs:{src:a(306),alt:"setCookie"}})]),t._v(" "),v("p",[t._v("保存 Cookie:")]),t._v(" "),v("p",[v("img",{attrs:{src:a(307),alt:"cookie的存储"}})])]),t._v(" "),v("li",[v("p",[t._v("之后对该服务器每一次请求中都通过 Cookie 字段将 Cookie 信息发送给服务器。")]),t._v(" "),v("p",[v("img",{attrs:{src:a(308),alt:"发送Cookie"}})])])]),t._v(" "),v("h3",{attrs:{id:"cookie-的缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的缺点"}},[t._v("#")]),t._v(" Cookie 的缺点")]),t._v(" "),v("ul",[v("li",[t._v("大小方向")]),t._v(" "),v("li",[t._v("安全方向")]),t._v(" "),v("li",[t._v("增加请求方向")])]),t._v(" "),v("h3",{attrs:{id:"请求库默认携带-cookie-的情况"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请求库默认携带-cookie-的情况"}},[t._v("#")]),t._v(" 请求库默认携带 cookie 的情况")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("fetch")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("fetch")]),t._v(" 在默认情况下, 不管是同域还是跨域`` ajax"),v("code",[t._v("请求都不会带上")]),t._v("cookie"),v("code",[t._v(", 只有当设置了")]),t._v("credentials"),v("code",[t._v("时才会带上该")]),t._v("ajax"),v("code",[t._v("请求所在域的")]),t._v("cookie"),v("code",[t._v(", 服务端需要设置响应头")]),t._v("Access-Control-Allow-Credentials: true`, 否则浏览器会因为安全限制而报错, 拿不到响应")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    credentials"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"include"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// include, same-origin, omit")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// include: 跨域 ajax 带上 cookie")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same-origin: 仅同域 ajax 带上 cookie")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// omit: 任何情况都不带 cookie")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("axios")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("axios")]),t._v(" 和 "),v("code",[t._v("jQuery")]),t._v(" 在同域 "),v("code",[t._v("ajax")]),t._v(" 请求时会带上 "),v("code",[t._v("cookie")]),t._v(", 跨域请求不会, 跨域请求需要设置 "),v("code",[t._v("withCredentials")]),t._v(" 和服务端响应头")])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("axios"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://server.com'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("withCredentials"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);